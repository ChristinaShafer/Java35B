package client;

import java.net.*;
import java.io.*;
import adapter.*;
import model.*;

public class DefaultSocketClient extends Thread  {

	////////// PROPERTIES //////////

	private ObjectOutputStream out;
	private ObjectInputStream in;
	private BufferedReader stdIn;
	private Socket sock;
	private String strHost;
	private int iPort;
	private CarModelOptionsIO clientFTP;
	private SelectCarOptions clientProtocol;
	private boolean DEBUG=true;

	////////// CONSTRUCTORS //////////

	public DefaultSocketClient(String strHost, int iPort) {
		this.strHost = strHost;
		this.iPort = iPort;
	}

	////////// INSTANCE METHODS //////////

	public boolean establishConnection() {
		try {
			if (DEBUG)
				System.out.println("Connecting to host ... ");
			this.sock = new Socket(strHost, iPort);
		}
		catch (IOException socketError) {
			System.err.println("Error setting up socket... " + strHost +", " + iPort);
			return false;
		}
		
		if (DEBUG)
				System.out.println("Connected to host, creating object streams ... ");
		try {
			out = new ObjectOutputStream(sock.getOutputStream());
			in = new ObjectInputStream(sock.getInputStream());
			stdIn = new BufferedReader(new InputStreamReader (System.in));
		}
		catch (IOException e) {
			System.err.println("Error setting up streams to host ... ");
			return false;
			//System.exit(1);
		}
			clientFTP = new CarModelOptionsIO();
			clientProtocol = new SelectCarOptions();
			return true;
	}

	public void handleConnection() {
		Object fromServer, toServer = null;

		try {
			if (DEBUG)
				System.out.println("Communicating with host ... ");

			while ((fromServer = in.readObject()) != null) {
				if (DEBUG)
					System.out.println("Received server response ... ");
				System.out.println(fromServer.toString());

				if (clientProtocol.isAutomobile(fromServer))
					clientProtocol.configureAuto(fromServer);

				System.out.println("Response to server: ");
				toServer = stdIn.readLine();
				//if it's a property file it's good, otherwise, bad input
				if (toServer.toString().contains(".prop")) {
					toServer = clientFTP.loadPropsFile(toServer.toString());
				}
				
				if (DEBUG)
					System.out.println("Sending " + toServer + " to server ... ");
				sendOutput(toServer);
				System.out.println("");
		
				if (toServer.equals("0")) {			
					if (DEBUG)
						System.out.println("Closing client input stream ... ");
					in.close();
					break;	
				}
			}
		}
		catch (ClassNotFoundException e1) {
			System.err.println("Error in downloaded object, object may be corrupted ... ");
			System.exit(1);
		}
		catch (IOException e2) {
			System.err.println("Error in I/O stream ... " + e2.getMessage());
			System.exit(1);
		}

		finally {
			if (DEBUG)
				System.out.println("finally!");
		}
	}

	public void sendOutput(Object obj) {
		try {
			out.writeObject(obj);
		}
		catch (IOException e) {
			System.err.println("Error in I/O stream while sending object to host ... ");
			System.exit(1);
		}
	}

	@Override
	public void run() {
		System.out.print("client>dsc: client is open for business");
		establishConnection();
		handleConnection();
		try {
			if (DEBUG)
				System.out.println("Closing client output stream ... ");
			out.close();

			if (DEBUG)
				System.out.println("Closing client console input stream ... ");
			stdIn.close();

			if (DEBUG)
				System.out.println("Closing client socket ... ");
			sock.close();
		}
		catch (IOException e) {
			System.err.println("Error ending client connection ... ");
			System.exit(1);
		}
	}
	public String getModelList() {
		String modelList="test";
		if (establishConnection()) {
			try {
				modelList = (String)in.readObject();
				sendOutput("3");
				modelList=(String)in.readObject();
				sendOutput("\n");
				}
			catch (Exception e){
				System.out.println("yeah?" + e.getMessage());
			}
		}
			return modelList;
	}
	
	//get auto to configure
	public Automobile getAuto(String model) {
		Automobile a = null;
		if (establishConnection()) {
			try {
				String discard=(String)in.readObject();
				sendOutput("2");
				discard=(String)in.readObject();
				sendOutput(model);
				a=(Automobile)in.readObject();
			}
			catch (Exception e) {
				System.out.println("There is a problem loading the auto.");
			}
			finally {
				System.out.println(a.getFullName());
			}
		}
		return a;
	}
	
	public void closeSession() {
		try {
			out.close();
			in.close();
			sock.close();
		} catch (IOException e) {
			if (DEBUG)
				System.err.println("Error closing socket to " + strHost);
		}
	}
}

=======================================================================================

package client;

import java.io.*;
import java.util.*;
import adapter.*;
import model.*;

public class CarModelOptionsIO {

	////////// PROPERTIES //////////


	////////// CONSTRUCTORS //////////

	public CarModelOptionsIO() {

	}

	////////// INSTANCE METHODS //////////

	public Object loadPropsFile(String fname) {
		Properties props = new Properties();
		int checkpath = fname.indexOf("\\"); 
		if (checkpath == -1) 
			fname="C:\\Users\\cljsh\\eclipse-workspace\\Lab6Servlet\\src\\" + fname;
		try {
			props.load(new FileInputStream(fname));
		}
		catch (FileNotFoundException e) {
			System.err.println(fname + " not found. ");
			//System.exit(1);
			props=null;
		}
		catch (IOException e) {
			System.err.println("Error reading file from directory ... ");
			System.exit(1);
		}
		return props;
	}
}


====================================================================================

package client;

import model.*;
import adapter.*;
import java.util.*;

public class SelectCarOptions {
	private static boolean DEBUG=false;
	////////// PROPERTIES //////////
	private Scanner in = new Scanner(System.in);

	////////// CONSTRUCTORS //////////
	public SelectCarOptions() {
	}

	////////// INSTANCE METHODS //////////

	public void configureAuto(Object obj) {
		if (DEBUG)
			System.out.println("It's configuration time! In SelectCarOptions!\n");
		Automobile a = (Automobile)obj;
		BuildAuto b = new BuildAuto();
		b.chooseOptions(a);
		System.out.print("You have configured the following:\n");
		a.printTotal();
		System.out.println("");
		System.out.println("Press any key to continue.");
	}

	public boolean isAutomobile(Object obj) {
		boolean isAutomobile = false;
		try {
			Automobile a1 = (Automobile) obj;
			isAutomobile = true;
			if (DEBUG)
				System.out.println("It's an auto!");
		}
		catch (ClassCastException e) {
			isAutomobile = false;
			if (DEBUG)
				System.out.println("That's NOT an auto!");
		}
		return isAutomobile;
	}
}

